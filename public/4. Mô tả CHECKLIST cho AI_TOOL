Input dạng CLOB sẽ là một JSON. Cách lấy JSON value trong oracledb là:
PROCEDURE EXAMPLE(ISDATA CLOB, ORESULT OUT REFCUR) AS
vCLITEM_CODE := JSON_VALUE (ISDATA, '$.CLITEM_CODE');   
vCLI_ACTION := JSON_VALUE (ISDATA, '$.CLI_ACTION');
---
- Ví dụ store Procedure tìm kiếm thông thường:
PROCEDURE SEARCH_CHECKLIST_ITEM(isCLITEM_CODE VARCHAR2, ORESULT OUT REFCUR) AS
  BEGIN
    OPEN ORESULT FOR
    SELECT
        A.CLI_ID,
        A.CLITEM_CODE,
        A.CLITEM_NAME,
        A.CLITEM_DOCSTYPE,
        B.NAME AS CLITEM_DOCSTYPE_NAME,
        A.CLITEM_REQUIRE,
        C.NAME AS CLITEM_REQUIRE_NAME,
        A.CLITEM_TIME_SUPPLY,
        CLITEM_TIME_SUPPLY AS CLITEM_TIME_SUPPLY_NAME,
        A.CLITEM_ADDTIME_PRESCRIBED,
        A.CLITEM_STATUS,
        A.USER_UPDATED,
        A.DATE_UPDATED
    FROM ADM_CHECKLIST_ITEM A
    INNER JOIN ADM_MASTERDATA B ON A.CLITEM_DOCSTYPE = B.CODE AND B.MASTERDATA_GROUP_CODE ='LOAICT'
    INNER JOIN ADM_MASTERDATA C ON A.CLITEM_REQUIRE = C.CODE AND C.MASTERDATA_GROUP_CODE ='BATBUOC'
    WHERE 
        (A.CLITEM_CODE = isCLITEM_CODE OR isCLITEM_CODE IS NULL)
        AND A.CLITEM_STATUS > -1;
  END SEARCH_CHECKLIST_ITEM;
- Ví dụ tìm kiếm theo danh sách:
    PROCEDURE LOAD_CHECKLIST_MATRIX(isCLGROUP_TYPE VARCHAR2,isCLGROUP_CODE VARCHAR2, ORESULT OUT REFCUR)AS
    BEGIN
        OPEN ORESULT FOR
        SELECT
            A.CLGROUP_TYPE,
            A.CLGROUP_CODE,
            A.CLITEM_CODE,
            A.CLIGM_STATUS
        FROM ADM_CHECKLIST_MATRIX A
        WHERE 
            (A.CLGROUP_TYPE = isCLGROUP_TYPE OR isCLGROUP_TYPE IS NULL)
            AND (A.CLGROUP_CODE IN (
                SELECT TRIM(UPPER(regexp_substr(isCLGROUP_CODE,'[^,]+', 1, level))) AS WORKFLOW_TYPE FROM dual
                CONNECT BY regexp_substr(isCLGROUP_CODE, '[^,]+', 1, level) IS NOT NULL
                ) 
                OR isCLGROUP_CODE IS NULL)
            AND A.CLIGM_STATUS > -1
            ORDER BY A.CLGROUP_CODE ASC ;
    END;
- Ví dụ về store procedure style:
    --hanhtt.hpt_300924: insert/update checklist matrix
    PROCEDURE UPSERT_CHECKLIST_MATRIX_IMPFILE( ISDATA_GRDETAIL CLOB, ORESULT OUT REFCUR) AS
        OSTHONGBAO          VARCHAR2(500);
        VPROCEDURE_RUNNING  VARCHAR2(500);
        VLOG_ID             NUMBER := 0;
        vCHECK_CLG NUMBER;
        vLIST_DUB VARCHAR2(1500);
    BEGIN
        FOR REC IN (
        SELECT
--            J.CLIGM_STATUS,
--            J.CLITEM_STATUS,
            J.CLGROUP_CODE,
            J.CLITEM_CODE,
            J.CLIGM_STATUS,
--            J.CLITEM_NAME,
            J.USER_UPDATED
        FROM JSON_TABLE(ISDATA_GRDETAIL,'$.data[*]' COLUMNS
            CLIGM_STATUS PATH '$.CLIG_STATUS',
--            CLITEM_STATUS PATH '$.CLITEM_STATUS',
            CLGROUP_CODE PATH '$.CLGROUP_CODE',
            CLITEM_CODE PATH '$.CLITEM_CODE',
--            CLITEM_NAME PATH '$.CLITEM_NAME',
            USER_UPDATED PATH '$.USER_UPDATED'
        )J
    ) LOOP
        SELECT COUNT(*) INTO vCHECK_CLG
        FROM ADM_CHECKLIST_MATRIX
        WHERE 
            CLGROUP_CODE = REC.CLGROUP_CODE
            AND CLITEM_CODE = REC.CLITEM_CODE;
        IF (vCHECK_CLG = 0) THEN
            INSERT INTO ADM_CHECKLIST_MATRIX (
--                CLGROUP_TYPE,
                CLGROUP_CODE,
                CLITEM_CODE,
--                CLITEM_NAME,
                CLIGM_STATUS,
--                CLITEM_STATUS,
--                CLIGROUP_STATUS,
                USER_CREATED,
                DATE_CREATED
            )VALUES(
--                isCLGROUP_TYPE,
                REC.CLGROUP_CODE,
                REC.CLITEM_CODE,
--                REC.CLITEM_NAME,
                REC.CLIGM_STATUS,
--                REC.CLITEM_STATUS,
--                REC.CLIGROUP_STATUS,
                REC.USER_UPDATED,
                SYSDATE
            );
            
            MERGE INTO (
                SELECT A.CLGROUP_TYPE, A.CLGROUP_CODE, A.CLITEM_CODE
                FROM ADM_CHECKLIST_MATRIX A 
                WHERE 
                    A.CLGROUP_CODE = REC.CLGROUP_CODE 
                    AND A.CLITEM_CODE= REC.CLITEM_CODE 
                    AND A.CLGROUP_TYPE IS NULL ) B
            USING (
                SELECT H.CLGROUP_TYPE, H.CLGROUP_CODE
                FROM ADM_CHECKLIST_GROUP H WHERE H.CLGROUP_CODE = REC.CLGROUP_CODE ORDER BY CLGROUP_STATUS DESC FETCH FIRST 1 ROWS ONLY ) T
            ON (B.CLGROUP_CODE = T.CLGROUP_CODE AND B.CLITEM_CODE= REC.CLITEM_CODE)
            WHEN MATCHED THEN UPDATE SET B.CLGROUP_TYPE = T.CLGROUP_TYPE;
            
            MERGE INTO (
                SELECT A.CLITEM_NAME, A.CLGROUP_CODE, A.CLITEM_CODE
                FROM ADM_CHECKLIST_MATRIX A 
                WHERE 
                    A.CLGROUP_CODE = REC.CLGROUP_CODE 
                    AND A.CLITEM_CODE= REC.CLITEM_CODE 
                    AND A.CLITEM_NAME IS NULL ) B
            USING (
                SELECT H.CLITEM_NAME, H.CLITEM_CODE
                FROM ADM_CHECKLIST_ITEM H WHERE H.CLITEM_CODE = REC.CLITEM_CODE ORDER BY CLITEM_STATUS DESC FETCH FIRST 1 ROWS ONLY ) T
            ON (B.CLITEM_CODE = T.CLITEM_CODE)
            WHEN MATCHED THEN UPDATE SET B.CLITEM_NAME = T.CLITEM_NAME;
            
        ELSE
            vLIST_DUB:= vLIST_DUB||REC.CLGROUP_CODE||REC.CLITEM_CODE;
        END IF;
    END LOOP;  
    OPEN ORESULT FOR
    SELECT 0 AS LOG_ID, 'Done' AS CODE , vLIST_DUB as LIST_DUB FROM DUAL;
    COMMIT;
    EXCEPTION WHEN OTHERS THEN
        ROLLBACK;
        OSTHONGBAO := SQLERRM;
        VPROCEDURE_RUNNING := ADMIN_V1.PROCEDURE_NAME_RUNNING('UPSERT_CHECKLIST_MATRIX_IMPFILE');
        VLOG_ID := ADMIN_V1.INSERT_LOG_ERR(VPROCEDURE_RUNNING,SQLERRM,NULL,vLIST_DUB, ISDATA_GRDETAIL);
        OPEN ORESULT FOR
        SELECT VLOG_ID AS LOG_ID, OSTHONGBAO AS CODE  FROM DUAL;
    
    END;



