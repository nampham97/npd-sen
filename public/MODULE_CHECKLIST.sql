CREATE OR REPLACE PACKAGE MODULE_CHECKLIST AS

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
    TYPE REFCUR IS REF CURSOR;
    --hanhtt.hpt_300924: insert/update checklist item
    PROCEDURE UPSERT_CHECKLIST_ITEM(ISDATA CLOB, ORESULT OUT REFCUR);
    --hanhtt.hpt_300924: insert/update checklist group
    PROCEDURE UPSERT_CHECKLIST_GROUP(ISDATA_GROUP CLOB,ISDATA_GRDETAIL CLOB, ORESULT OUT REFCUR);
    --hanhtt.hpt_300924: insert/update checklist matrix
    PROCEDURE UPSERT_CHECKLIST_MATRIX(isCLGROUP_TYPE VARCHAR2,isCLGROUP_CODE VARCHAR2, ISDATA_GRDETAIL CLOB, ORESULT OUT REFCUR);
    --hanhtt.hpt_300924: Tìm kiếm checklist
    PROCEDURE SEARCH_CHECKLIST_ITEM(isCLITEM_CODE VARCHAR2, ORESULT OUT REFCUR);
    --hanhtt.hpt_300924: Tìm kiếm Nhóm checklist
    PROCEDURE SEARCH_CHECKLIST_GROUP(isPRC_CODE VARCHAR2, isCLGROUP_CODE VARCHAR2, ORESULT OUT REFCUR);
    --hanhtt.hpt_300924: Tìm kiếm 
    PROCEDURE SEARCH_CHECKLIST_MATRIX(isCLGROUP_CODE VARCHAR2, ORESULT OUT REFCUR);
    --hanhtt.hpt_300924: Tìm kiếm 
    PROCEDURE LOAD_CHECKLIST_ITEM(isCLITEM_CODE VARCHAR2, ORESULT OUT REFCUR);
    --hanhtt.hpt_300924: Tìm kiếm 
    PROCEDURE LOAD_CHECKLIST_GROUP(isCLGROUP_CODE VARCHAR2, ORESULT OUT REFCUR);
    --hanhtt.hpt_300924: Tìm kiếm mapping checklist ITEM - GROUP 
    PROCEDURE LOAD_CHECKLIST_MATRIX(isCLGROUP_TYPE VARCHAR2,isCLGROUP_CODE VARCHAR2, ORESULT OUT REFCUR);
    --hanhtt.hpt_111024: insert/update checklist item import file
    PROCEDURE UPSERT_CHECKLIST_ITEM_IMPFILE(ISDATA CLOB, ORESULT OUT REFCUR) ;
    --hanhtt.hpt_111024: insert/update checklist group item import file
    PROCEDURE UPSERT_CHECKLIST_GROUP_IMPFILE (ISDATA_GROUP CLOB,ISDATA_GRDETAIL CLOB, ORESULT OUT REFCUR);
    --hanhtt.hpt_300924: insert/update checklist matrix
    PROCEDURE UPSERT_CHECKLIST_MATRIX_IMPFILE(ISDATA_GRDETAIL CLOB, ORESULT OUT REFCUR);
    
END MODULE_CHECKLIST;
/


CREATE OR REPLACE PACKAGE BODY MODULE_CHECKLIST AS

  PROCEDURE UPSERT_CHECKLIST_ITEM(ISDATA CLOB, ORESULT OUT REFCUR) AS
    OSTHONGBAO          VARCHAR2(500);
    VPROCEDURE_RUNNING  VARCHAR2(500);
    VLOG_ID             NUMBER := 0;
    
    vCLITEM_CODE VARCHAR2(50);
    vCHECK_ITEM NUMBER;
    vCLITEM_STATUS NUMBER;
    
    vCLI_ACTION VARCHAR2(10);
    vCLITEM_MATRIX NUMBER;
  BEGIN
    vCLITEM_CODE := JSON_VALUE (ISDATA, '$.CLITEM_CODE');   
    vCLI_ACTION := JSON_VALUE (ISDATA, '$.CLI_ACTION'); -- ADD/EDIT
    
    IF (vCLI_ACTION = 'ADD') THEN
        SELECT COUNT(*) INTO vCHECK_ITEM
        FROM ADM_CHECKLIST_ITEM
        WHERE CLITEM_CODE = vCLITEM_CODE;
    
        IF(vCHECK_ITEM = 0) THEN
            INSERT INTO ADM_CHECKLIST_ITEM(
                CLITEM_CODE,
                CLITEM_NAME,
                CLITEM_DOCSTYPE,
                CLITEM_REQUIRE,
                CLITEM_TIME_SUPPLY,
                CLITEM_ADDTIME_PRESCRIBED,
                CLITEM_STATUS,
                CLITEM_NOTE,
                USER_CREATED,
                DATE_CREATED,
                USER_UPDATED,
                DATE_UPDATED
            )VALUES(
                vCLITEM_CODE, --CLITEM_CODE,
                JSON_VALUE (ISDATA, '$.CLITEM_NAME'), --CLITEM_NAME,
                JSON_VALUE (ISDATA, '$.CLITEM_DOCSTYPE'), --CLITEM_DOCSTYPE,
                JSON_VALUE (ISDATA, '$.CLITEM_REQUIRE'), --CLITEM_REQUIRE,
                JSON_VALUE (ISDATA, '$.CLITEM_TIME_SUPPLY'), --CLITEM_TIME_SUPPLY,
                JSON_VALUE (ISDATA, '$.CLITEM_ADDTIME_PRESCRIBED'), --CLITEM_ADDTIME_PRESCRIBED,
                1, --STATUS,
                'THUCONG', --CLITEM_NOTE,
                JSON_VALUE (ISDATA, '$.USER_UPDATED'), --USER_CREATED,
                SYSDATE, --DATE_CREATED
                JSON_VALUE (ISDATA, '$.USER_UPDATED'), --USER_CREATED,
                SYSDATE --DATE_CREATED
            );
            OPEN ORESULT FOR
            SELECT 0 AS LOG_ID, 'Done' AS CODE  FROM DUAL;
        ELSE
            OPEN ORESULT FOR
            SELECT 1 AS LOG_ID, 'ITEM '||vCLITEM_CODE||' đã tồn tại. Mời xem lại *O*' AS CODE  FROM DUAL;
        END IF;
    ELSE
        SELECT COUNT(*) INTO vCLITEM_MATRIX
        FROM ADM_CHECKLIST_MATRIX
        WHERE 
            CLITEM_CODE = vCLITEM_CODE
            AND CLIGM_STATUS > -1 ;
            
       vCLITEM_STATUS := JSON_VALUE (ISDATA, '$.CLITEM_STATUS');
        
        IF (vCLITEM_MATRIX > 0 AND vCLITEM_STATUS < 1) THEN 
            OPEN ORESULT FOR
            SELECT 
                0 AS LOG_ID,
                'Checklist Item đang gắn với Mã nhóm checklist '||LISTAGG(CLGROUP_CODE, ',') WITHIN GROUP (ORDER BY CLGROUP_CODE)||'
                Vui lòng kiểm tra lại ! *O*'
                 AS CODE
            FROM ADM_CHECKLIST_MATRIX
            WHERE 
                CLITEM_CODE = vCLITEM_CODE
                AND CLIGM_STATUS > -1 ;
        ELSE
            UPDATE ADM_CHECKLIST_ITEM SET
                CLITEM_NAME = JSON_VALUE (ISDATA, '$.CLITEM_NAME'),
                CLITEM_DOCSTYPE = JSON_VALUE (ISDATA, '$.CLITEM_DOCSTYPE'),
                CLITEM_REQUIRE = JSON_VALUE (ISDATA, '$.CLITEM_REQUIRE'),
                CLITEM_TIME_SUPPLY = JSON_VALUE (ISDATA, '$.CLITEM_TIME_SUPPLY'),
                CLITEM_ADDTIME_PRESCRIBED = JSON_VALUE (ISDATA, '$.CLITEM_ADDTIME_PRESCRIBED'),
                CLITEM_STATUS = vCLITEM_STATUS,
                CLITEM_NOTE = 'THUCONG_UPDATE',
                USER_UPDATED = JSON_VALUE (ISDATA, '$.USER_UPDATED'),
                DATE_UPDATED = SYSDATE
            WHERE CLITEM_CODE = vCLITEM_CODE;
            
            IF( vCLITEM_STATUS < 1) THEN
                UPDATE ADM_CHECKLIST_MATRIX SET
                    CLIGM_STATUS = vCLITEM_STATUS,
                    USER_UPDATED = JSON_VALUE (ISDATA, '$.USER_UPDATED'),
                    DATE_UPDATED = SYSDATE
                WHERE CLITEM_CODE = vCLITEM_CODE;
            END IF;
        END IF;
        
        OPEN ORESULT FOR
        SELECT 0 AS LOG_ID, 'Done' AS CODE  FROM DUAL;
    END IF;
    
    COMMIT;
    EXCEPTION WHEN OTHERS THEN
        ROLLBACK;
        OSTHONGBAO := SQLERRM;
        VPROCEDURE_RUNNING := ADMIN_V1.PROCEDURE_NAME_RUNNING('UPSERT_CHECKLIST_ITEM');
        VLOG_ID := ADMIN_V1.INSERT_LOG_ERR(VPROCEDURE_RUNNING,SQLERRM,vCLITEM_CODE,ISDATA);
        OPEN ORESULT FOR
        SELECT VLOG_ID AS LOG_ID, OSTHONGBAO AS CODE  FROM DUAL;
  END UPSERT_CHECKLIST_ITEM;

  PROCEDURE UPSERT_CHECKLIST_GROUP(ISDATA_GROUP CLOB,ISDATA_GRDETAIL CLOB, ORESULT OUT REFCUR) AS
    OSTHONGBAO          VARCHAR2(500);
    VPROCEDURE_RUNNING  VARCHAR2(500);
    VLOG_ID             NUMBER := 0;
    
    vCLGROUP_CODE VARCHAR2(50);
    vCHECK_CLG NUMBER;
    vCLGROUP_STATUS NUMBER;
    
    vCLG_ACTION VARCHAR2(10);
    VPRC_CODE VARCHAR2(10);
    vCLGROUP_TYPE VARCHAR2(20);
  BEGIN
    vCLGROUP_CODE := JSON_VALUE (ISDATA_GROUP, '$.CLGROUP_CODE');
    vCLG_ACTION := JSON_VALUE (ISDATA_GROUP, '$.CLG_ACTION'); -- ADD/EDIT
    VPRC_CODE := JSON_VALUE (ISDATA_GROUP, '$.PRC_CODE');
    vCLGROUP_TYPE := JSON_VALUE (ISDATA_GROUP, '$.CLGROUP_TYPE');
    
    IF (vCLG_ACTION ='ADD') THEN 
        SELECT COUNT(*) INTO vCHECK_CLG
        FROM ADM_CHECKLIST_GROUP
        WHERE CLGROUP_CODE = vCLGROUP_CODE;
        
        IF(vCHECK_CLG = 0) THEN
            INSERT INTO ADM_CHECKLIST_GROUP(
                PRC_CODE,
                CLGROUP_TYPE,
                CLGROUP_CODE,
                CLGROUP_NAME,
                CLGROUP_STATUS,
                CLGROUP_NOTE,
                USER_CREATED,
                DATE_CREATED
            )VALUES(
                VPRC_CODE, --PRC_CODE,
                vCLGROUP_TYPE,
                vCLGROUP_CODE, --CLGROUP_CODE,
                JSON_VALUE (ISDATA_GROUP, '$.CLGROUP_NAME'), --CLGROUP_NAME,
                JSON_VALUE (ISDATA_GROUP, '$.CLGROUP_STATUS'), --CLGROUP_STATUS,
                'INSERT', --CLGROUP_NOTE,
                JSON_VALUE (ISDATA_GROUP, '$.USER_UPDATED'), --USER_CREATED,
                SYSDATE
            );
            
            UPSERT_CHECKLIST_MATRIX(isCLGROUP_TYPE => VCLGROUP_TYPE, isCLGROUP_CODE  => vCLGROUP_CODE, ISDATA_GRDETAIL  => ISDATA_GRDETAIL, ORESULT  => ORESULT);
            
            OPEN ORESULT FOR
            SELECT 0 AS LOG_ID, 'Done' AS CODE  FROM DUAL;
        ELSE
            OPEN ORESULT FOR
            SELECT 1 AS LOG_ID, 'GROUP ITEM '||vCLGROUP_CODE||' đã tồn tại. Mời xem lại *O*' AS CODE  FROM DUAL;
        END IF;
    ELSE
        UPDATE ADM_CHECKLIST_GROUP SET
                PRC_CODE = JSON_VALUE (ISDATA_GROUP, '$.PRC_CODE'),
                CLGROUP_TYPE = JSON_VALUE (ISDATA_GROUP, '$.CLGROUP_TYPE'),
                CLGROUP_NAME = JSON_VALUE (ISDATA_GROUP, '$.CLGROUP_NAME'),
                CLGROUP_STATUS = JSON_VALUE (ISDATA_GROUP, '$.CLGROUP_STATUS'),
                CLGROUP_NOTE = 'UPDATE',
                USER_UPDATED = JSON_VALUE (ISDATA_GROUP, '$.USER_UPDATED'),
                DATE_UPDATED = SYSDATE
            WHERE CLGROUP_CODE = vCLGROUP_CODE;
            
            vCLGROUP_STATUS := JSON_VALUE (ISDATA_GROUP, '$.CLGROUP_STATUS');
            IF( vCLGROUP_STATUS < 1) THEN
                UPDATE ADM_CHECKLIST_MATRIX SET
                    CLIGM_STATUS = vCLGROUP_STATUS,
                    USER_UPDATED = JSON_VALUE (ISDATA_GROUP, '$.USER_UPDATED'),
                    DATE_UPDATED = SYSDATE
                WHERE CLGROUP_CODE = vCLGROUP_CODE;
            END IF;
            
        UPSERT_CHECKLIST_MATRIX(isCLGROUP_TYPE => VCLGROUP_TYPE, isCLGROUP_CODE  => vCLGROUP_CODE, ISDATA_GRDETAIL  => ISDATA_GRDETAIL, ORESULT  => ORESULT);
        
        OPEN ORESULT FOR
        SELECT 0 AS LOG_ID, 'Done' AS CODE  FROM DUAL;
    END IF;
        
    COMMIT;
    
    EXCEPTION WHEN OTHERS THEN
        ROLLBACK;
        OSTHONGBAO := SQLERRM;
        VPROCEDURE_RUNNING := ADMIN_V1.PROCEDURE_NAME_RUNNING('UPSERT_CHECKLIST_GROUP');
        VLOG_ID := ADMIN_V1.INSERT_LOG_ERR(VPROCEDURE_RUNNING,SQLERRM,vCLGROUP_CODE,ISDATA_GROUP);
        OPEN ORESULT FOR
        SELECT VLOG_ID AS LOG_ID, OSTHONGBAO AS CODE  FROM DUAL;
  END UPSERT_CHECKLIST_GROUP;

  PROCEDURE UPSERT_CHECKLIST_MATRIX(isCLGROUP_TYPE VARCHAR2, isCLGROUP_CODE VARCHAR2, ISDATA_GRDETAIL CLOB, ORESULT OUT REFCUR) AS
    OSTHONGBAO          VARCHAR2(500);
    VPROCEDURE_RUNNING  VARCHAR2(500);
    VLOG_ID             NUMBER := 0;
    
    vCLGROUP_CODE VARCHAR2(50);
    vCHECK_CLG NUMBER;
  BEGIN
    FOR REC IN (
        SELECT
            J.CLITEM_CODE,
            J.USER_UPDATED
        FROM JSON_TABLE(ISDATA_GRDETAIL,'$[*]' COLUMNS
            CLITEM_CODE     PATH '$.CLITEM_CODE',
            USER_UPDATED PATH '$.USER_UPDATED'
        )J
    ) LOOP
        UPDATE ADM_CHECKLIST_MATRIX
        SET
            CLIGM_STATUS          = -1,
            USER_UPDATED    = REC.USER_UPDATED,
            DATE_UPDATED    = SYSDATE
        WHERE
            CLGROUP_TYPE = isCLGROUP_TYPE
            AND CLGROUP_CODE = isCLGROUP_CODE
            AND CLITEM_CODE = REC.CLITEM_CODE
            ;
    END LOOP;
        
    FOR REC IN (
        SELECT
            J.CLIGM_STATUS,
--            J.CLITEM_STATUS,
            J.CLIGROUP_STATUS,
            J.CLITEM_CODE,
            J.CLITEM_NAME,
            J.USER_UPDATED
        FROM JSON_TABLE(ISDATA_GRDETAIL,'$[*]' COLUMNS
            CLIGM_STATUS PATH '$.CLIG_STATUS',
--            CLITEM_STATUS PATH '$.CLITEM_STATUS',
            CLIGROUP_STATUS PATH '$.CLGROUP_STATUS',
            CLITEM_CODE PATH '$.CLITEM_CODE',
            CLITEM_NAME PATH '$.CLITEM_NAME',
            USER_UPDATED PATH '$.USER_UPDATED'
        )
    ) LOOP
        SELECT COUNT(*) INTO vCHECK_CLG
        FROM ADM_CHECKLIST_MATRIX
        WHERE 
            CLGROUP_TYPE = isCLGROUP_TYPE
            AND CLGROUP_CODE = isCLGROUP_CODE
            AND CLITEM_CODE = REC.CLITEM_CODE;
        IF (vCHECK_CLG > 0) THEN
            UPDATE ADM_CHECKLIST_MATRIX SET
                CLITEM_NAME          = REC.CLITEM_NAME,
                CLIGM_STATUS          = REC.CLIGM_STATUS,
                USER_UPDATED    = REC.USER_UPDATED,
                DATE_UPDATED    = SYSDATE
            WHERE 
                CLGROUP_TYPE = isCLGROUP_TYPE
                AND CLGROUP_CODE = isCLGROUP_CODE
                AND CLITEM_CODE = REC.CLITEM_CODE;
        ELSE
            INSERT INTO ADM_CHECKLIST_MATRIX (
                CLGROUP_TYPE,
                CLGROUP_CODE,
                CLITEM_CODE,
                CLITEM_NAME,
                CLIGM_STATUS,
                USER_CREATED,
                DATE_CREATED
            )VALUES(
                isCLGROUP_TYPE,
                isCLGROUP_CODE,
                REC.CLITEM_CODE,
                REC.CLITEM_NAME,
                REC.CLIGM_STATUS,
                REC.USER_UPDATED,
                SYSDATE
            );
        END IF;
    END LOOP;    
    COMMIT;
    OPEN ORESULT FOR
    SELECT 0 AS LOG_ID, 'Done' AS CODE  FROM DUAL;
    EXCEPTION WHEN OTHERS THEN
        ROLLBACK;
        OSTHONGBAO := SQLERRM;
        VPROCEDURE_RUNNING := ADMIN_V1.PROCEDURE_NAME_RUNNING('UPSERT_CHECKLIST_MATRIX');
        VLOG_ID := ADMIN_V1.INSERT_LOG_ERR(VPROCEDURE_RUNNING,SQLERRM,isCLGROUP_CODE,ISDATA_GRDETAIL);
        OPEN ORESULT FOR
        SELECT VLOG_ID AS LOG_ID, OSTHONGBAO AS CODE  FROM DUAL;
  END UPSERT_CHECKLIST_MATRIX;

  PROCEDURE SEARCH_CHECKLIST_ITEM(isCLITEM_CODE VARCHAR2, ORESULT OUT REFCUR) AS
  BEGIN
    OPEN ORESULT FOR
    SELECT
        A.CLI_ID,
        A.CLITEM_CODE,
        A.CLITEM_NAME,
        A.CLITEM_DOCSTYPE,
        B.NAME AS CLITEM_DOCSTYPE_NAME,
        A.CLITEM_REQUIRE,
        C.NAME AS CLITEM_REQUIRE_NAME,
        A.CLITEM_TIME_SUPPLY,
        CLITEM_TIME_SUPPLY AS CLITEM_TIME_SUPPLY_NAME,
        A.CLITEM_ADDTIME_PRESCRIBED,
        A.CLITEM_STATUS,
        A.USER_UPDATED,
        A.DATE_UPDATED
    FROM ADM_CHECKLIST_ITEM A
    INNER JOIN ADM_MASTERDATA B ON A.CLITEM_DOCSTYPE = B.CODE AND B.MASTERDATA_GROUP_CODE ='LOAICT'
    INNER JOIN ADM_MASTERDATA C ON A.CLITEM_REQUIRE = C.CODE AND C.MASTERDATA_GROUP_CODE ='BATBUOC'
    WHERE 
        (A.CLITEM_CODE = isCLITEM_CODE OR isCLITEM_CODE IS NULL)
        AND A.CLITEM_STATUS > -1;
  END SEARCH_CHECKLIST_ITEM;

  PROCEDURE SEARCH_CHECKLIST_GROUP(isPRC_CODE VARCHAR2, isCLGROUP_CODE VARCHAR2, ORESULT OUT REFCUR) AS
  BEGIN
    OPEN ORESULT FOR
    SELECT
        A.CLGROUP_CODE,
        A.CLGROUP_NAME,
        A.PRC_CODE,
        C.NAME AS PRC_CODE_NAME,
        A.CLGROUP_TYPE,
        B.NAME AS CLGROUP_TYPE_NAME,
        A.USER_UPDATED,
        A.DATE_UPDATED,
        A.CLGROUP_STATUS
    FROM ADM_CHECKLIST_GROUP A
    INNER JOIN ADM_MASTERDATA B ON A.CLGROUP_TYPE = B.CODE AND B.MASTERDATA_GROUP_CODE ='LOAINHOMCHECKLIST'
    INNER JOIN ADM_MASTERDATA C ON A.PRC_CODE = C.CODE AND C.MASTERDATA_GROUP_CODE ='QUYTRINH'
    WHERE 
        (A.PRC_CODE = isPRC_CODE OR isPRC_CODE IS NULL)
        AND (A.CLGROUP_CODE = isCLGROUP_CODE  OR isCLGROUP_CODE IS NULL)
        AND A.CLGROUP_STATUS > -1;
  END SEARCH_CHECKLIST_GROUP;

  PROCEDURE SEARCH_CHECKLIST_MATRIX(isCLGROUP_CODE VARCHAR2, ORESULT OUT REFCUR) AS
  BEGIN
    OPEN ORESULT FOR
    SELECT
        A.CLGROUP_CODE,
        A.CLITEM_CODE,
        A.CLITEM_NAME,
        A.CLIGM_STATUS
    FROM ADM_CHECKLIST_MATRIX A
    WHERE 
        (A.CLGROUP_CODE = isCLGROUP_CODE OR isCLGROUP_CODE IS NULL)
        AND A.CLIGM_STATUS > -1
        ORDER BY CLITEM_CODE DESC;
  END SEARCH_CHECKLIST_MATRIX;
  
  PROCEDURE LOAD_CHECKLIST_ITEM(isCLITEM_CODE VARCHAR2, ORESULT OUT REFCUR) AS
  BEGIN
    OPEN ORESULT FOR
    SELECT
        A.CLI_ID,
        A.CLITEM_CODE,
        A.CLITEM_NAME,
        A.CLITEM_STATUS,
        A.CLITEM_CODE||'-'||A.CLITEM_NAME AS CLITEM_CODENAME
    FROM ADM_CHECKLIST_ITEM A
    WHERE 
        (A.CLITEM_CODE = isCLITEM_CODE OR isCLITEM_CODE IS NULL)
        AND A.CLITEM_STATUS > -1
        ORDER BY A.CLITEM_CODE ASC ;
  END LOAD_CHECKLIST_ITEM;

    PROCEDURE LOAD_CHECKLIST_GROUP(isCLGROUP_CODE VARCHAR2, ORESULT OUT REFCUR) AS
    BEGIN
    OPEN ORESULT FOR
    SELECT
        A.CLG_ID,
        A.CLGROUP_CODE,
        A.CLGROUP_NAME,
        A.CLGROUP_CODE||'-'||A.CLGROUP_NAME AS CLGROUP_CODENAME
    FROM ADM_CHECKLIST_GROUP A
    WHERE 
        (A.CLGROUP_CODE = isCLGROUP_CODE OR isCLGROUP_CODE IS NULL)
        AND A.CLGROUP_STATUS > -1
        ORDER BY A.CLGROUP_CODE ASC ;
    END LOAD_CHECKLIST_GROUP;
    
    --hanhtt.hpt_300924: Tìm kiếm mapping checklist ITEM - GROUP
    PROCEDURE LOAD_CHECKLIST_MATRIX(isCLGROUP_TYPE VARCHAR2,isCLGROUP_CODE VARCHAR2, ORESULT OUT REFCUR)AS
    BEGIN
        OPEN ORESULT FOR
        SELECT
            A.CLGROUP_TYPE,
            A.CLGROUP_CODE,
            A.CLITEM_CODE,
            A.CLIGM_STATUS
        FROM ADM_CHECKLIST_MATRIX A
        WHERE 
            (A.CLGROUP_TYPE = isCLGROUP_TYPE OR isCLGROUP_TYPE IS NULL)
            AND (A.CLGROUP_CODE IN (
                SELECT TRIM(UPPER(regexp_substr(isCLGROUP_CODE,'[^,]+', 1, level))) AS WORKFLOW_TYPE FROM dual
                CONNECT BY regexp_substr(isCLGROUP_CODE, '[^,]+', 1, level) IS NOT NULL
                ) 
                OR isCLGROUP_CODE IS NULL)
            AND A.CLIGM_STATUS > -1
            ORDER BY A.CLGROUP_CODE ASC ;
    END;
    
    --hanhtt.hpt_11102024: insert/update checklist item import file
    PROCEDURE UPSERT_CHECKLIST_ITEM_IMPFILE(ISDATA CLOB, ORESULT OUT REFCUR) AS
        OSTHONGBAO          VARCHAR2(500);
        VPROCEDURE_RUNNING  VARCHAR2(500);
        VLOG_ID             NUMBER := 0;    
        
        vCHECK_ITEM NUMBER;
        
        vLIST_DUB VARCHAR2(500);
    BEGIN
        FOR REC IN (
             SELECT 
                CLITEM_CODE,
                CLI_ACTION,
                CLITEM_NAME,
                CLITEM_DOCSTYPE,
                CLITEM_REQUIRE,
                CLITEM_TIME_SUPPLY,
                CLITEM_ADDTIME_PRESCRIBED,
                USER_CREATED
            FROM JSON_TABLE (ISDATA, '$' COLUMNS (
                NESTED PATH '$.data[*]' COLUMNS (
                    CLITEM_CODE PATH '$.CLITEM_CODE',
                    CLI_ACTION PATH '$.CLI_ACTION',
                    CLITEM_NAME PATH '$.CLITEM_NAME',
                    CLITEM_DOCSTYPE PATH '$.CLITEM_DOCSTYPE',
                    CLITEM_REQUIRE PATH '$.CLITEM_REQUIRE',
                    CLITEM_TIME_SUPPLY PATH '$.CLITEM_TIME_SUPPLY',
                    CLITEM_ADDTIME_PRESCRIBED PATH '$.CLITEM_ADDTIME_PRESCRIBED',
                    USER_CREATED PATH '$.USER_UPDATED'
            )) ) A
        )LOOP
            SELECT COUNT(*) INTO vCHECK_ITEM
            FROM ADM_CHECKLIST_ITEM
            WHERE CLITEM_CODE = REC.CLITEM_CODE;
        
            IF(vCHECK_ITEM = 0) THEN
                INSERT INTO ADM_CHECKLIST_ITEM(
                    CLITEM_CODE,
                    CLITEM_NAME,
                    CLITEM_DOCSTYPE,
                    CLITEM_REQUIRE,
                    CLITEM_TIME_SUPPLY,
                    CLITEM_ADDTIME_PRESCRIBED,
                    CLITEM_STATUS,
                    CLITEM_NOTE,
                    USER_CREATED,
                    DATE_CREATED,
                    USER_UPDATED,
                    DATE_UPDATED
                )VALUES(
                    REC.CLITEM_CODE,
                    REC.CLITEM_NAME,
                    REC.CLITEM_DOCSTYPE,
                    REC.CLITEM_REQUIRE,
                    REC.CLITEM_TIME_SUPPLY,
                    REC.CLITEM_ADDTIME_PRESCRIBED,
                    1, --STATUS,
                    'INPORT_FILE', --CLITEM_NOTE,
                    REC.USER_CREATED,
                    SYSDATE, --DATE_CREATED
                    REC.USER_CREATED, --USER_CREATED,
                    SYSDATE --DATE_CREATED
                );
            ELSE
                vLIST_DUB := vLIST_DUB||REC.CLITEM_CODE;
            END IF;
        END LOOP;
        
        OPEN ORESULT FOR
        SELECT 0 AS LOG_ID, 'Done' AS CODE , vLIST_DUB AS LIST_DUB FROM DUAL;
    COMMIT;
    EXCEPTION WHEN OTHERS THEN
        ROLLBACK;
        OSTHONGBAO := SQLERRM;
        VPROCEDURE_RUNNING := ADMIN_V1.PROCEDURE_NAME_RUNNING('UPSERT_CHECKLIST_ITEM_IMPFILE');
        VLOG_ID := ADMIN_V1.INSERT_LOG_ERR(VPROCEDURE_RUNNING,SQLERRM,'',ISDATA);
        OPEN ORESULT FOR
        SELECT VLOG_ID AS LOG_ID, OSTHONGBAO AS CODE  FROM DUAL;
    END;
    
    --hanhtt.hpt_111024: insert/update checklist group item import file
    PROCEDURE UPSERT_CHECKLIST_GROUP_IMPFILE (ISDATA_GROUP CLOB,ISDATA_GRDETAIL CLOB, ORESULT OUT REFCUR)AS
        OSTHONGBAO          VARCHAR2(500);
        VPROCEDURE_RUNNING  VARCHAR2(500);
        VLOG_ID             NUMBER := 0;    
        
        vLIST_DUB VARCHAR2(500);
        vCHECK_ITEM NUMBER;
    BEGIN
        FOR REC IN (
             SELECT 
                CLGROUP_CODE,
                CLG_ACTION,
                PRC_CODE,
                CLGROUP_TYPE,
                CLGROUP_NAME,
                CLGROUP_STATUS,
                USER_CREATED
            FROM JSON_TABLE (ISDATA_GROUP, '$' COLUMNS (
                NESTED PATH '$.data[*]' COLUMNS (
                    CLGROUP_CODE PATH '$.CLGROUP_CODE',
                    CLG_ACTION PATH '$.CLG_ACTION',
                    PRC_CODE PATH '$.PRC_CODE',
                    CLGROUP_TYPE PATH '$.CLGROUP_TYPE',
                    CLGROUP_NAME PATH '$.CLGROUP_NAME',
                    CLGROUP_STATUS PATH '$.CLGROUP_STATUS',
                    USER_CREATED PATH '$.USER_UPDATED'
            ) )) A
            
        )LOOP
            SELECT COUNT(*) INTO vCHECK_ITEM
            FROM ADM_CHECKLIST_GROUP
            WHERE CLGROUP_CODE = REC.CLGROUP_CODE;
        
            IF(vCHECK_ITEM = 0) THEN
                INSERT INTO ADM_CHECKLIST_GROUP(
                    PRC_CODE,
                    CLGROUP_TYPE,
                    CLGROUP_CODE,
                    CLGROUP_NAME,
                    CLGROUP_STATUS,
                    CLGROUP_NOTE,
                    USER_CREATED,
                    DATE_CREATED
                )VALUES(
                    REC.PRC_CODE, --PRC_CODE,
                    REC.CLGROUP_TYPE,
                    REC.CLGROUP_CODE,
                    REC.CLGROUP_NAME,
                    REC.CLGROUP_STATUS,
                    'IMPORT_FILE', --CLGROUP_NOTE,
                    REC.USER_CREATED,
                    SYSDATE
                );
            ELSE
                vLIST_DUB := vLIST_DUB||'-'||REC.CLGROUP_CODE;
            END IF;
        END LOOP;
        
        OPEN ORESULT FOR
        SELECT 0 AS LOG_ID, 'Done' AS CODE , vLIST_DUB AS LIST_DUB FROM DUAL;
    COMMIT;
    EXCEPTION WHEN OTHERS THEN
        ROLLBACK;
        OSTHONGBAO := SQLERRM;
        VPROCEDURE_RUNNING := ADMIN_V1.PROCEDURE_NAME_RUNNING('UPSERT_CHECKLIST_ITEM_IMPFILE');
        VLOG_ID := ADMIN_V1.INSERT_LOG_ERR(VPROCEDURE_RUNNING,SQLERRM,NULL,ISDATA_GROUP, ISDATA_GRDETAIL);
        OPEN ORESULT FOR
        SELECT VLOG_ID AS LOG_ID, OSTHONGBAO AS CODE  FROM DUAL;
    
    END;
    
    --hanhtt.hpt_300924: insert/update checklist matrix
    PROCEDURE UPSERT_CHECKLIST_MATRIX_IMPFILE( ISDATA_GRDETAIL CLOB, ORESULT OUT REFCUR) AS
        OSTHONGBAO          VARCHAR2(500);
        VPROCEDURE_RUNNING  VARCHAR2(500);
        VLOG_ID             NUMBER := 0;
        vCHECK_CLG NUMBER;
        vLIST_DUB VARCHAR2(1500);
    BEGIN
        FOR REC IN (
        SELECT
--            J.CLIGM_STATUS,
--            J.CLITEM_STATUS,
            J.CLGROUP_CODE,
            J.CLITEM_CODE,
            J.CLIGM_STATUS,
--            J.CLITEM_NAME,
            J.USER_UPDATED
        FROM JSON_TABLE(ISDATA_GRDETAIL,'$.data[*]' COLUMNS
            CLIGM_STATUS PATH '$.CLIG_STATUS',
--            CLITEM_STATUS PATH '$.CLITEM_STATUS',
            CLGROUP_CODE PATH '$.CLGROUP_CODE',
            CLITEM_CODE PATH '$.CLITEM_CODE',
--            CLITEM_NAME PATH '$.CLITEM_NAME',
            USER_UPDATED PATH '$.USER_UPDATED'
        )J
    ) LOOP
        SELECT COUNT(*) INTO vCHECK_CLG
        FROM ADM_CHECKLIST_MATRIX
        WHERE 
            CLGROUP_CODE = REC.CLGROUP_CODE
            AND CLITEM_CODE = REC.CLITEM_CODE;
        IF (vCHECK_CLG = 0) THEN
            INSERT INTO ADM_CHECKLIST_MATRIX (
--                CLGROUP_TYPE,
                CLGROUP_CODE,
                CLITEM_CODE,
--                CLITEM_NAME,
                CLIGM_STATUS,
--                CLITEM_STATUS,
--                CLIGROUP_STATUS,
                USER_CREATED,
                DATE_CREATED
            )VALUES(
--                isCLGROUP_TYPE,
                REC.CLGROUP_CODE,
                REC.CLITEM_CODE,
--                REC.CLITEM_NAME,
                REC.CLIGM_STATUS,
--                REC.CLITEM_STATUS,
--                REC.CLIGROUP_STATUS,
                REC.USER_UPDATED,
                SYSDATE
            );
            
            MERGE INTO (
                SELECT A.CLGROUP_TYPE, A.CLGROUP_CODE, A.CLITEM_CODE
                FROM ADM_CHECKLIST_MATRIX A 
                WHERE 
                    A.CLGROUP_CODE = REC.CLGROUP_CODE 
                    AND A.CLITEM_CODE= REC.CLITEM_CODE 
                    AND A.CLGROUP_TYPE IS NULL ) B
            USING (
                SELECT H.CLGROUP_TYPE, H.CLGROUP_CODE
                FROM ADM_CHECKLIST_GROUP H WHERE H.CLGROUP_CODE = REC.CLGROUP_CODE ORDER BY CLGROUP_STATUS DESC FETCH FIRST 1 ROWS ONLY ) T
            ON (B.CLGROUP_CODE = T.CLGROUP_CODE AND B.CLITEM_CODE= REC.CLITEM_CODE)
            WHEN MATCHED THEN UPDATE SET B.CLGROUP_TYPE = T.CLGROUP_TYPE;
            
            MERGE INTO (
                SELECT A.CLITEM_NAME, A.CLGROUP_CODE, A.CLITEM_CODE
                FROM ADM_CHECKLIST_MATRIX A 
                WHERE 
                    A.CLGROUP_CODE = REC.CLGROUP_CODE 
                    AND A.CLITEM_CODE= REC.CLITEM_CODE 
                    AND A.CLITEM_NAME IS NULL ) B
            USING (
                SELECT H.CLITEM_NAME, H.CLITEM_CODE
                FROM ADM_CHECKLIST_ITEM H WHERE H.CLITEM_CODE = REC.CLITEM_CODE ORDER BY CLITEM_STATUS DESC FETCH FIRST 1 ROWS ONLY ) T
            ON (B.CLITEM_CODE = T.CLITEM_CODE)
            WHEN MATCHED THEN UPDATE SET B.CLITEM_NAME = T.CLITEM_NAME;
            
        ELSE
            vLIST_DUB:= vLIST_DUB||REC.CLGROUP_CODE||REC.CLITEM_CODE;
        END IF;
    END LOOP;  
    OPEN ORESULT FOR
    SELECT 0 AS LOG_ID, 'Done' AS CODE , vLIST_DUB as LIST_DUB FROM DUAL;
    COMMIT;
    EXCEPTION WHEN OTHERS THEN
        ROLLBACK;
        OSTHONGBAO := SQLERRM;
        VPROCEDURE_RUNNING := ADMIN_V1.PROCEDURE_NAME_RUNNING('UPSERT_CHECKLIST_MATRIX_IMPFILE');
        VLOG_ID := ADMIN_V1.INSERT_LOG_ERR(VPROCEDURE_RUNNING,SQLERRM,NULL,vLIST_DUB, ISDATA_GRDETAIL);
        OPEN ORESULT FOR
        SELECT VLOG_ID AS LOG_ID, OSTHONGBAO AS CODE  FROM DUAL;
    
    END;
END MODULE_CHECKLIST;
/
